package hr.nhex.battle;

import hr.nhex.board.BoardTile;
import hr.nhex.board.IBasicBoard;
import hr.nhex.model.Module;
import hr.nhex.model.Tile;
import hr.nhex.model.Unit;
import hr.nhex.model.ability.Ability;
import hr.nhex.model.unit.Attack;

import java.util.ArrayList;
import java.util.List;

/**
 * Razred koji predstavlja simulator borbe u igri Neuroshima Hex.
 * 
 * @author Luka Rukliæ
 * @author Marin Bužanèiæ
 *
 */

public class BattleSimulator implements IBasicBoard {

	// hp treba updateat

	List<BattleTile> boardBattleTiles = new ArrayList<>();

	int[] angleX = {1, 0, -1, -1, 0, 1};	// zakomentiraj
	int[] angleY = {0, 1, 1, 0, -1, -1};

	/**
	 * Konstruktor koji popunjava listu s poljima koja æe se koristiti prilikom borbe.
	 * 
	 * @param listTiles lista s poljima trenutno na ploèi
	 */
	public BattleSimulator(List<BoardTile> listTiles) {
		for (BoardTile tile : listTiles) {
			boardBattleTiles.add(new BattleTile(tile.copy()));
		}
	}

	/**
	 * Metoda koja obavlja funkciju konstruktora razreda BattleSimulator na naèin da kopira èitavu ploèu
	 * odnosno sva njezina polja u razred <code>BattleSimulator</code>.
	 * 
	 * @param listTiles lista s poljima
	 */
	public void reloadBoardToBattle(List<BoardTile> listTiles) {
		for (BoardTile tile : listTiles) {
			boardBattleTiles.add(new BattleTile(tile.copy()));
		}
	}

	/**
	 * Metoda simulatora borbe koja izvršava borbu.
	 */
	public void executeBattle() {
		applyModuleBonus();

		for (int i = defineHighestSpeed(); i >= 0; i--) {

		}



		updateAfterEffects();

	}

	/**
	 * Metoda koja odreðuje najveæu brzinu (inicijativu) koja se pojavljuje tijekom borbe.
	 */

	private int defineHighestSpeed() {
		int highestSpeed = 0;
		for (BattleTile bt : boardBattleTiles) {
			if (bt.getTile() instanceof Unit) {
				Unit unit = (Unit)bt.getTile();
				for (int speed : unit.getSpeed()) {
					if (speed > highestSpeed) {
						highestSpeed = speed;
					}
				}
			}
		}
		return highestSpeed;
	}

	private void applyModuleBonus() {

		for (BattleTile battleTile : boardBattleTiles) {
			BoardTile currentTile = battleTile.getTile();
			// prvo ide provjera mreže, provjera da li postoje moguæi potezi unutar borbe
			if (currentTile instanceof Module && !currentTile.isNetted()) {
				for (Ability ability : ((Module)currentTile).getAbilities()) {
					int pointsToTileX = currentTile.getX() + angleX[(ability.getPointsTo() + currentTile.getAngle()) % 6];
					int pointsToTileY = currentTile.getY() + angleY[(ability.getPointsTo() + currentTile.getAngle()) % 6];
					BattleTile bonusApplicant = getBattleTile(pointsToTileX, pointsToTileY);
					if (bonusApplicant != null && currentTile.getPlayer().equals(bonusApplicant.getTile().getPlayer())) {
						ability.getType().applyBonus(bonusApplicant);
					}
				}
			}
		}
	}

	/**
	 * Metoda koja nakon izvršene borbe ažurira stanje ploèe (životne bodove, mreže, otrov) te
	 * mièe jedinice èiji su se životni bodovi spustili ispod 1.
	 */

	private void updateAfterEffects() {

	}

	@Override
	public boolean isFilled(int x, int y) {
		for (BattleTile battleTile : boardBattleTiles) {
			if (battleTile.getTile().getX() == x && battleTile.getTile().getY() == y) {
				return true;
			}
		}
		return false;
	}

	public BattleTile getBattleTile(int x, int y) {
		for (BattleTile battleTile : boardBattleTiles) {
			if (battleTile.getTile().getX() == x && battleTile.getTile().getY() == y) {
				return battleTile;
			}
		}
		return null;
	}

	@Override
	public Tile getTile(int x, int y) {
		// TODO Auto-generated method stub
		return null;
	}

	/**
	 * Metoda koja ispisuje trenutna polja na ploèi, zajedno s njihovim imenima, životnim bodovima te lokacijom
	 */

	public void printBoardState() {
		for (BattleTile battleTile : boardBattleTiles) {
			BoardTile tile = battleTile.getTile();
			System.out.println(tile.getName() + ", HP: " +
					tile.getHitPoints() + ", LOC: " +
					tile.getX() + ", " + tile.getY());
		}
	}

	public void printBoardUnitState() {
		for (BattleTile battleTile : boardBattleTiles) {
			if (battleTile.getTile() instanceof Unit) {
				Unit unit = (Unit)battleTile.getTile();
				System.out.println(unit.getName() + ", HP: " +
						unit.getHitPoints() + ", LOC: " +
						unit.getX() + ", " + unit.getY());
				System.out.print("speed:");
				for (Integer speed : unit.getSpeed()) {
					System.out.println(speed + " ");
				}
				System.out.print("attacks: ");
				for (Attack attack : unit.getAttacks()) {
					System.out.println("Attack Side: " + attack.getPointsTo() + " Attack Value: "+attack.getValue());
				}
				System.out.println();
			}
		}
	}

}
